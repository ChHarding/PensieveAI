# Function to generate PDF from result
def generate_pdf(result_text):
    class MarkdownToPDF(FPDF):
        def __init__(self):
            super().__init__()
            self.add_page()
            self.set_auto_page_break(auto=True, margin=20)
            self.set_font("Arial", size=12)
        
        def write_markdown(self, markdown_text):
            lines = markdown_text.split('\n')
            for line in lines:
                line = line.strip()
                if not line:
                    continue  # Skip empty lines
                # Heading
                if line.startswith('#'):
                    level = len(re.match(r'#+', line).group(0))
                    text = line[level:].strip()
                    if level == 1:
                        self.set_font("Arial", 'B', 16)
                    elif level == 2:
                        self.set_font("Arial", 'B', 14)
                    elif level == 3:
                        self.set_font("Arial", 'B', 12)
                    else:
                        self.set_font("Arial", 'B', 12)
                    self.multi_cell(0, 10, txt=text)
                    self.ln()
                    self.set_font("Arial", size=12)
                # Bullet points
                elif line.startswith('- ') or line.startswith('* '):
                    text = line[2:].strip()
                    self.cell(10)  # Indent
                    self.multi_cell(0, 10, txt='â€¢ ' + text)
                # Numbered lists
                elif re.match(r'\d+\.', line):
                    self.cell(10)  # Indent
                    self.multi_cell(0, 10, txt=line)
                else:
                    # Regular paragraph
                    self.multi_cell(0, 10, txt=line)
                    self.ln()

    pdf = MarkdownToPDF()
    pdf.write_markdown(result_text)

  # Save the PDF to a bytes buffer
    pdf_bytes = pdf.output(dest='B')  # 'B' returns as bytes
    pdf_buffer = io.BytesIO(pdf_bytes)
    pdf_buffer.seek(0)
    return pdf_buffer